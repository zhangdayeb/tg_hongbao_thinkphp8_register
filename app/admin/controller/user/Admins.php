<?php

namespace app\admin\controller\user;


use app\admin\controller\Base;
use app\common\model\AdminModel as models;
use app\common\traites\PublicCrudTrait;
use app\common\validate\Admin;
use think\exception\ValidateException;
use think\facade\Db;

class Admins extends Base
{
    protected $model;
    use PublicCrudTrait;
    /**
     * 后台用户控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    //获取列表信息
    public function index()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post= array_filter($this->request->post());
        $map=[];
        isset($post['user_name']) && $map [] = ['a.user_name', 'like', '%' . $post['user_name'] . '%'];
        isset($post['role']) && $map [] = ['role','=',$post['role']];
        isset($post['market_level']) && $map [] = ['a.market_level','=',$post['market_level']];

        $list = $this->model->page_list($map,$limit, $page);
        return $this->success($list);
    }

    public function add()
    {
        //过滤数据
        $postField = 'pid,user_name,pwd,role,market_level,remarks,invitation_code';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(Admin::class)->scene('add')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        //验证成功，查询是否存在该用户
        $user = $this->model->where('user_name', $post['user_name'])->find();
        if ($user) return $this->failed('该用户以存在');
        //加密密码
        $post['pwd'] = !empty($post['pwd']) && isset($post['pwd']) ? pwdEncryption($post['pwd']) : pwdEncryption(admin_Initial_pwd());
        $post['invitation_code'] =generateCode(32,40);
        //插入数据库
        !isset($post['pid']) && $post['pid'] = 0;
        !isset($post['market_level']) && $post['market_level'] = 0;
        $save = false;
        Db::startTrans();
        try {
            //写入角色 并
           $this->model->save($post);
            $this->market(intval($this->model->id), intval($post['pid']),intval($post['market_level']));
            $save = true;
            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }
        if ($save) return $this->success([]);
        return $this->failed('新增失败');
    }

    //写入到 common_market_relation 数据
    public function market(int $userId, int $pid,int $level)
    {
        if ($userId <= 0) return false;
        $db = Db::name('common_market_relation');
        if ($pid >= 1) {
            //查询到当前用户的父级
            $find = $db->where('aid', $pid)->find();
            //获取用户父级信息 插入到数据
            $db->insert(['aid' => $userId, 'a_level' => $level, 'pid' => $find['aid'], 'p_level' => $find['a_level'], 'path' => $find['path'] . ',' . $userId]);
            return true;
        }
        // 新增当前数据
        $db->insert(['aid' => $userId, 'a_level' => $level, 'pid' => 0, 'p_level' => 0, 'path' => $userId]);
        return true;
    }

    /**
     * 获取用户信息
     * @return mixed
     */
    public function detail()
    {
        //过滤数据
        $postField = 'id';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //验证数据
        try {
            validate(Admin::class)->scene('detail')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        //查询用户数据
        $user = $this->model->find($post['id']);
        if ($user) return $this->success($user);
        return $this->failed('用户不存在');
    }

    /**
     * 修改方法
     * @return mixed
     */
    public function edit()
    {
        //过滤数据
        $postField = 'id,user_name,pwd,role,market_level,remarks';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        //验证数据
        try {
            validate(Admin::class)->scene('edit')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }

        //查询是否重复的用户名
        $find = $this->model->where('user_name', $post['user_name'])->where('id', '<>', $post['id'])->find();
        if ($find) return $this->failed('用户已存在');
        !empty($post['pwd']) && $post['pwd'] = pwdEncryption($post['pwd']);
        $post=array_filter($post);
        //执行修改数据
        $save = $this->model->update($post);

        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }
}